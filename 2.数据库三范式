数据库设计时，有一定的规则，总共有６个范式，但是一般我们设计到三范式就可以了

三范式：
１NF:字段不可分
2NF:有主键，非主键字段依赖主键
3NF:非主键字段不能相互依赖

解释：
1NF:原子性，每一列都不能再分
２NF:唯一性，一个表代表一个事物
３NF:每一列都与主键有直接关系，不存在依赖传递

第一范式（1NF）
　即表的列的具有原子性,不可再分解，即列的信息，不能分解, 只要数据库是关系型数据库(mysql/oracle/db2/informix/sysbase/sql server)，
　就自动的满足1NF。数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。如果实体中的某个属性有多个值时，必须拆
　分为不同的属性。通俗理解即一个字段只存储一项信息。
 
第二范式（2NF）
　　第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。
  　第二范式（2NF）要求数据库表中的每个实例或行必须可以被惟一地区分。为实现区分通常需要我们设计一个主键来实现(这里的主键不包含业务逻辑)。
  　即满足第一范式前提，当存在多个主键的时候，才会发生不符合第二范式的情况。比如有两个主键，不能存在这样的属性，它只依赖于其中一个主键，这就是不符合第二范式。
  　通俗理解是任意一个字段都只依赖表中的同一个字段。（涉及到表的拆分）
   
第三范式：
    满足第三范式（3NF）必须先满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个数据库表中不包含已在其它表中已包含的非主键字段。就是说，表的信息，如果能够被
    推导出来，就不应该单独的设计一个字段来存放(能尽量外键join就用外键join)。很多时候，我们为了满足第三范式往往会把一张表分成多张表。
    
    即满足第二范式前提，如果某一属性依赖于其他非主键属性，而其他非主键属性又依赖于主键，那么这个属性就是间接依赖于主键，这被称作传递依赖于主属性。 通俗解释
    就是一张表最多只存两层同类型信息。
    
    
    
